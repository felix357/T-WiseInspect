/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.io.File;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;

import org.example.commands.SamplingExecutionCommand;
import org.example.common.SamplingAlgorithm;
import org.example.common.SamplingConfig;
import org.example.common.TWiseCalculator;
import org.example.out.ResultWriter;
import org.example.parsing.FeatureModelParser;

import de.featjar.analysis.sat4j.computation.ComputeCoreDeadMIG;
import de.featjar.analysis.sat4j.computation.ComputeCoreSAT4J;
import de.featjar.analysis.sat4j.computation.YASA;
import de.featjar.analysis.sat4j.twise.CoverageStatistic;
import de.featjar.base.computation.Computations;
import de.featjar.base.computation.IComputation;
import de.featjar.base.data.Pair;
import de.featjar.formula.VariableMap;
import de.featjar.formula.assignment.BooleanAssignment;
import de.featjar.formula.assignment.BooleanClauseList;
import de.featjar.formula.assignment.BooleanSolutionList;
import de.featjar.formula.assignment.ComputeBooleanClauseList;
import de.featjar.formula.computation.ComputeCNFFormula;
import de.featjar.formula.computation.ComputeNNFFormula;
import de.featjar.formula.structure.IFormula;
import de.ovgu.featureide.fm.core.analysis.cnf.CNF;
import de.ovgu.featureide.fm.core.analysis.cnf.LiteralSet;
import de.ovgu.featureide.fm.core.analysis.cnf.Variables;
import de.ovgu.featureide.fm.core.analysis.cnf.formula.FeatureModelFormula;
import de.ovgu.featureide.fm.core.job.LongRunningWrapper;
import de.ovgu.featureide.fm.core.job.monitor.ConsoleMonitor;
import de.ovgu.featureide.fm.core.analysis.cnf.generator.configuration.IConfigurationGenerator;
import de.ovgu.featureide.fm.core.analysis.cnf.generator.configuration.PairWiseConfigurationGenerator;
import de.ovgu.featureide.fm.core.base.IFeatureModel;
import de.ovgu.featureide.fm.core.base.impl.FormatManager;
import de.ovgu.featureide.fm.core.io.manager.FeatureModelManager;
import de.ovgu.featureide.fm.core.io.manager.FileHandler;
import picocli.CommandLine;
import picocli.CommandLine.Command;

@Command(description = "Main application for sampling Analysis.")
public class SamplingAnalyzer {

    public static SamplingConfig samplingConfig = new SamplingConfig(SamplingAlgorithm.YASA, 2);
    public static File inputDir;
    public static File outputDir;

    public static void main(String[] args) {

        CommandLine commandLine = new CommandLine(new SamplingAnalyzer());

        commandLine.addSubcommand(new SamplingExecutionCommand());
        int exitCode = commandLine.execute(args);

        String input_file_name = inputDir.getName();

        IFormula formula = FeatureModelParser.convertXMLToFormula(input_file_name);

        ComputeBooleanClauseList cnf = Computations.of(formula)
                .map(ComputeNNFFormula::new)
                .map(ComputeCNFFormula::new)
                .set(ComputeCNFFormula.IS_PLAISTED_GREENBAUM, Boolean.TRUE)
                .map(ComputeBooleanClauseList::new);

        Pair<BooleanClauseList, VariableMap> computedCNF = cnf.compute();
        BooleanClauseList booleanClauseList = computedCNF.getKey();
        VariableMap variables = computedCNF.getValue();

        IComputation<BooleanClauseList> clauseListComputation = Computations.of(booleanClauseList);
        BooleanAssignment core = clauseListComputation.map(ComputeCoreSAT4J::new).compute();
        BooleanAssignment coreAndDeadFeatures = clauseListComputation.map(ComputeCoreDeadMIG::new).compute();

        BooleanSolutionList sample = null;

        if (samplingConfig.getSamplingAlgorithm() == SamplingAlgorithm.YASA) {
            YASA yasa = new YASA(clauseListComputation);
            sample = yasa.compute();
        } else if (samplingConfig.getSamplingAlgorithm() == SamplingAlgorithm.INCLING) {

            /*
             * Path fmFile = Paths.get(
             * "C:/Users/felix/Documents/uni/9. semester/projekt_feature_interactions/develop/t-wise-sampling/example_input.xml"
             * );
             * final FileHandler<IFeatureModel> fileHandler =
             * FeatureModelManager.getFileHandler(fmFile);
             * if (fileHandler.getLastProblems().containsError()) {
             * throw new
             * IllegalArgumentException(fileHandler.getLastProblems().getErrors().get(0).
             * error);
             * }
             */

            List<String> varNames = variables.getVariableNames();
            Variables v = new Variables(varNames);
            final CNF cn = new CNF(v);

            // final CNF c = new FeatureModelFormula(fileHandler.getObject()).getCNF();
            int limit = 10;
            IConfigurationGenerator generator = new PairWiseConfigurationGenerator(cn,
                    limit);
            final List<LiteralSet> result = LongRunningWrapper.runMethod(generator, new ConsoleMonitor<>());
        }

        CoverageStatistic coverageStatistic = TWiseCalculator.computeTWiseStatistics(booleanClauseList, core, sample,
                samplingConfig.getT());

        ResultWriter.writeResultToFile(outputDir, coreAndDeadFeatures, sample, booleanClauseList, samplingConfig.getT(),
                samplingConfig.getSamplingAlgorithm(), coverageStatistic, variables);

        System.exit(exitCode);
    }
}