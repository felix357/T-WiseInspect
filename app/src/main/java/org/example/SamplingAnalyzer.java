/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.io.File;

import org.example.commands.SamplingExecutionCommand;
import org.example.common.SamplingAlgorithm;
import org.example.common.SamplingConfig;
import org.example.common.SamplingProcessor;
import org.example.common.TWiseCalculator;
import org.example.out.ResultWriter;
import org.example.parsing.FeatureModelParser;
import de.featjar.analysis.sat4j.computation.ComputeCoreDeadMIG;
import de.featjar.analysis.sat4j.computation.ComputeCoreSAT4J;
import de.featjar.analysis.sat4j.twise.CoverageStatistic;
import de.featjar.base.computation.Computations;
import de.featjar.formula.VariableMap;
import de.featjar.formula.assignment.BooleanAssignment;
import de.featjar.formula.assignment.BooleanAssignmentList;
import de.featjar.formula.assignment.ComputeBooleanClauseList;
import de.featjar.formula.computation.ComputeCNFFormula;
import de.featjar.formula.computation.ComputeNNFFormula;
import de.featjar.formula.structure.IFormula;
import picocli.CommandLine;
import picocli.CommandLine.Command;
import java.util.*;

@Command(description = "Main application for sampling Analysis.")
public class SamplingAnalyzer {

        public static SamplingConfig samplingConfig = new SamplingConfig(SamplingAlgorithm.YASA, 2);
        public static File inputDir;
        public static File outputDir;

        public static void main(String[] args) {
                CommandLine commandLine = new CommandLine(new SamplingAnalyzer());
                commandLine.addSubcommand(new SamplingExecutionCommand());
                int exitCode = commandLine.execute(args);

                FeatureModelParser.initializeFeatJAR();
                IFormula formula = FeatureModelParser.convertXMLToFormula(inputDir.toPath().toString());

                BooleanAssignmentList computedCNF = Computations.of(formula)
                                .map(ComputeNNFFormula::new)
                                .map(ComputeCNFFormula::new)
                                .map(ComputeBooleanClauseList::new)
                                .compute();

                VariableMap variables = computedCNF.getVariableMap();
                BooleanAssignmentList sample = SamplingProcessor.process(samplingConfig, computedCNF, variables);

                BooleanAssignment core = Computations.of(computedCNF).map(ComputeCoreSAT4J::new).compute();
                BooleanAssignment coreAndDead = Computations.of(computedCNF).map(ComputeCoreDeadMIG::new).compute();

                CoverageStatistic coverage = TWiseCalculator.computeTWiseStatistics(computedCNF, core, sample,
                                variables, samplingConfig.getT());
                Long covered = TWiseCalculator.computeTWiseCount(sample, samplingConfig.getT(),
                                new BooleanAssignment(new int[] {}), computedCNF, List.of());

                System.out.println("covered: " + covered);

                ResultWriter.writeResultToFile(outputDir, coreAndDead, sample, samplingConfig.getT(),
                                samplingConfig.getSamplingAlgorithm(), coverage, variables);
                System.exit(exitCode);
        }

}